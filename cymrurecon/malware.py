'''
Copyright 2023 Paolo Smiraglia <paolo.smiraglia@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''

import logging

from restfly.endpoint import APIEndpoint

LOG = logging.getLogger(__name__)


class MalwareAPIEndpoint(APIEndpoint):
    _path = 'api/malware'

    def search(self, search_type, search_term, **kwargs):
        params = {}

        # mandatory attributes
        if not search_type:
            raise Exception('Argument must have a value: search_type')

        allowed_values = ['av_signature', 'bindport', 'dropped_file_digest',
                          'dropped_filename', 'email', 'filesystem_changes',
                          'hash', 'hostname', 'icon_digest', 'import_hash',
                          'ip', 'irc', 'mutex', 'process', 'registry', 'url',
                          'user_agent']
        if search_type not in allowed_values:
            raise Exception(('Argument "search_type" must have one of the '
                             f'following values: {",".join(allowed_values)}'))
        params['search_type'] = search_type

        if not search_term:
            raise Exception('Argument must have a value: search_term')
        params['search_term'] = search_term

        # optional attributes
        for key in kwargs:
            arg = None

            if key == 'page_length':
                arg = kwargs.pop(key, 0)
                if arg > 0 and arg <= 10000:
                    params[key] = arg

            if key in ['page']:
                arg = kwargs.pop(key, None)
                if arg:
                    params[key] = arg

        # make the call
        resp = {}
        try:
            resp = self._api.post(f'{self._path}/search', json=params).json()
        except Exception as e:
            LOG.error(e)
        return resp

    def report(self, digest, **kwargs):
        params = {}

        # mandatory attribute
        if not digest:
            raise Exception('Argument must have a value: digest')

        allowed_values = ['MD5', 'SHA1', 'SHA256']
        if digest not in allowed_values:
            raise Exception(('Argument "digest" must have one of the '
                             f'following values: {",".join(allowed_values)}'))
        params['digest'] = digest

        # optional attributes
        for key in kwargs:
            arg = None

            if key == 'format':
                arg = kwargs.pop(key, None)
                if arg and arg in ['json', 'xml', 'pdf']:
                    params[key] = arg

            if key in ['runs']:
                arg = kwargs.pop(key, None)
                if (arg in ['limited', 'full']) and (params.get('format', '') == 'pdf'):  # noqa
                    params[key] = arg

        # make the call
        resp = None
        try:
            _resp = self._api.post(f'{self._path}/report', json=params)
            fmt = params.get('format', '')
            if fmt == 'pdf':
                raise Exception('To be implemented...')
            elif fmt == 'xml':
                raise Exception('To be implemented...')
            else:
                resp = _resp.json()
        except Exception as e:
            LOG.error(e)
        return resp
